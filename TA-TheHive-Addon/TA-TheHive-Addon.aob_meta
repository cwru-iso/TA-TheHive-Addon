{"basic_builder": {"small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAADpUlEQVRYhe2WTWgcZRjHexJBYjc7886m6Yf1UFTozPs+z4xNQYiCxa+DFQsKfhyEFpqLSIpYPEhRD1UM6MWDtSEgiOBBxNL0kqVEVGoTd97Z+LFtaclBRWPJzjub2vrB38NsNlk2bXZ1Vovk8L/s++68v3n+/+eZd12iCdeT1v3XAGtAa0DXBdDspIezE+qaOn9S/htAClcqCrbDcBz/mhIFxtxU51AdA/VvlBgfVTCaYEJ1VZ36WKInx0gi1R0gEypMfuBhfZ7qhyjMTXkt+xZ/q4YEZ0OAsZF0bxeACHmbEWuFhbJEXFLYuMFHHC6zpSxhOdwA+OMCoTfPSMrtW9cWkNGEF4Z87BqUMGF62KUZDyfGFG7ZWrdOE3YOEN465MEs/jeS2PckYff9S5CZAfX1ExaiZouq04yZcYlnn/Hx+B4fs5MSRjdXY2FGwrIGcPGrVnv/FpAJFe7a4ePNl1Zez+UJtu1DiADr84yFcmsljo9tx61bCXFp9SqtCvTjNMFyCHGpNQeXvyUUCimMEAFs4aN0bOXu7OsnROP8z4BMqDB32oPTx4ivsv72qwy5/U7cfhvjwBDDhK3gRhM2bWKcLa5uW1sZeuxhwtOPBoh16xuaUCEu1bXCeqIJJ8Y8uHcE2Vi2WHK7QJifrr9hpJCUJSbeZ0g37SATKjApvPuah+rUEtilGQ+9FuOnqdXtahvIhAoT7ykESqFaUjj1EeHmXoItGIcPEhItUStLVIrcCPfxUYlYM0ZfZwzupMa4yKhCi58JiQfu9iFEGmSrQPj1axfvHFYY3p/m7KYerofcx7ZthFrkoSuTOtGEAd9vtLgQAe67J7Xh8ncSV86khx4cogawEAE2b1GoRRlP6lgTnts7ANumxkFWgVApuvjlNOHoiIujIy5mvyDMlxScZaNACB+DO/xsLZsvSVjLYIQI0JNjmFBh6CkPjzxI2P0Q4Yk9LkyoYDvNe4UI8P1nbjZAsWYcO+I1Pdy2GZ8cYRgtl1q+rkQTvimqFqA0/BlV6PxJD/ayXPTkGLXIw8vDDFukEsJHr8V45XkFoyVyFjcBffphlh/XUOHQMMMSDMthXJhM59BvFYk/z6km/V5JA3yumN6dLCvArnv9tjutoy5Lu6X+4LLEGy/yiqpFbmN/rSzbDnTHQE3ZCiW2bOaWrDiF9u8+mQIlmhCXPNxwo99o71yeUW3z3tMVoEQTkkji5y8lfvjc7WgAdg8oY60BrQH974D+ApmBD3Nf62PLAAAAAElFTkSuQmCC", "tab_build_no": "12", "appname": "TA-TheHive-Addon", "tab_version": "2.2.0", "build_no": 3, "author": "Kyle Colantonio", "friendly_name": "TheHive Add-on", "theme": "#3c6188", "large_icon": "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", "visible": true, "version": "1.0.0", "description": "An add-on that adds an Alert Action for creating alerts in TheHive."}, "alert_action_builder": {"modular_alerts": [{"smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAADpUlEQVRYhe2WTWgcZRjHexJBYjc7886m6Yf1UFTozPs+z4xNQYiCxa+DFQsKfhyEFpqLSIpYPEhRD1UM6MWDtSEgiOBBxNL0kqVEVGoTd97Z+LFtaclBRWPJzjub2vrB38NsNlk2bXZ1Vovk8L/s++68v3n+/+eZd12iCdeT1v3XAGtAa0DXBdDspIezE+qaOn9S/htAClcqCrbDcBz/mhIFxtxU51AdA/VvlBgfVTCaYEJ1VZ36WKInx0gi1R0gEypMfuBhfZ7qhyjMTXkt+xZ/q4YEZ0OAsZF0bxeACHmbEWuFhbJEXFLYuMFHHC6zpSxhOdwA+OMCoTfPSMrtW9cWkNGEF4Z87BqUMGF62KUZDyfGFG7ZWrdOE3YOEN465MEs/jeS2PckYff9S5CZAfX1ExaiZouq04yZcYlnn/Hx+B4fs5MSRjdXY2FGwrIGcPGrVnv/FpAJFe7a4ePNl1Zez+UJtu1DiADr84yFcmsljo9tx61bCXFp9SqtCvTjNMFyCHGpNQeXvyUUCimMEAFs4aN0bOXu7OsnROP8z4BMqDB32oPTx4ivsv72qwy5/U7cfhvjwBDDhK3gRhM2bWKcLa5uW1sZeuxhwtOPBoh16xuaUCEu1bXCeqIJJ8Y8uHcE2Vi2WHK7QJifrr9hpJCUJSbeZ0g37SATKjApvPuah+rUEtilGQ+9FuOnqdXtahvIhAoT7ykESqFaUjj1EeHmXoItGIcPEhItUStLVIrcCPfxUYlYM0ZfZwzupMa4yKhCi58JiQfu9iFEGmSrQPj1axfvHFYY3p/m7KYerofcx7ZthFrkoSuTOtGEAd9vtLgQAe67J7Xh8ncSV86khx4cogawEAE2b1GoRRlP6lgTnts7ANumxkFWgVApuvjlNOHoiIujIy5mvyDMlxScZaNACB+DO/xsLZsvSVjLYIQI0JNjmFBh6CkPjzxI2P0Q4Yk9LkyoYDvNe4UI8P1nbjZAsWYcO+I1Pdy2GZ8cYRgtl1q+rkQTvimqFqA0/BlV6PxJD/ayXPTkGLXIw8vDDFukEsJHr8V45XkFoyVyFjcBffphlh/XUOHQMMMSDMthXJhM59BvFYk/z6km/V5JA3yumN6dLCvArnv9tjutoy5Lu6X+4LLEGy/yiqpFbmN/rSzbDnTHQE3ZCiW2bOaWrDiF9u8+mQIlmhCXPNxwo99o71yeUW3z3tMVoEQTkkji5y8lfvjc7WgAdg8oY60BrQH974D+ApmBD3Nf62PLAAAAAElFTkSuQmCC", "short_name": "thehive_create_alert", "uuid": "ea243323a229421984ff3cbbe2b709c2", "code": "\n# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets the setup parameters and prints them to the log\n    thehive_url = helper.get_global_setting(\"thehive_url\")\n    helper.log_info(\"thehive_url={}\".format(thehive_url))\n    thehive_key = helper.get_global_setting(\"thehive_key\")\n    helper.log_info(\"thehive_key={}\".format(thehive_key))\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example sends rest requests to some endpoint\n    # response is a response object in python requests library\n    response = helper.send_http_request(\"http://www.splunk.com\", \"GET\", parameters=None,\n                                        payload=None, headers=None, cookies=None, verify=True, cert=None, timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n\n    # The following example gets the alert action parameters and prints them to the log\n    alert_source = helper.get_param(\"alert_source\")\n    helper.log_info(\"alert_source={}\".format(alert_source))\n\n    alert_type = helper.get_param(\"alert_type\")\n    helper.log_info(\"alert_type={}\".format(alert_type))\n\n    alert_title = helper.get_param(\"alert_title\")\n    helper.log_info(\"alert_title={}\".format(alert_title))\n\n    alert_description = helper.get_param(\"alert_description\")\n    helper.log_info(\"alert_description={}\".format(alert_description))\n\n    alert_tags = helper.get_param(\"alert_tags\")\n    helper.log_info(\"alert_tags={}\".format(alert_tags))\n\n    alert_case_template = helper.get_param(\"alert_case_template\")\n    helper.log_info(\"alert_case_template={}\".format(alert_case_template))\n\n    alert_severity = helper.get_param(\"alert_severity\")\n    helper.log_info(\"alert_severity={}\".format(alert_severity))\n\n    alert_tlp = helper.get_param(\"alert_tlp\")\n    helper.log_info(\"alert_tlp={}\".format(alert_tlp))\n\n    alert_pap = helper.get_param(\"alert_pap\")\n    helper.log_info(\"alert_pap={}\".format(alert_pap))\n\n    alert_group_by = helper.get_param(\"alert_group_by\")\n    helper.log_info(\"alert_group_by={}\".format(alert_group_by))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    import time\n    import uuid\n\n    helper.set_log_level(helper.log_level)\n    helper.log_info(\"Alert action 'thehive_create_alert' started.\")\n\n    # Default dataTypes\n    DATA_TYPES = [\n        \"url\",\n        \"other\",\n        \"user-agent\",\n        \"regexp\",\n        \"mail_subject\",\n        \"registry\",\n        \"mail\",\n        \"autonomous-system\",\n        \"domain\",\n        \"ip\",\n        \"uri_path\",\n        \"filename\",\n        \"hash\",\n        \"file\",\n        \"fqdn\",\n        \"account\",\n        \"field\",\n        \"tag\"\n    ]\n\n    # Show if we're grouping alerts\n    if helper.get_param(\"alert_group_by\"):\n        helper.log_info(\"Grouping alert by field '{}'\".format(helper.get_param(\"alert_group_by\")))\n\n    alerts = {} # List of Alerts to be sent\n    artifacts = [] # Temporary list of artifacts so duplicates aren't added\n    for event in helper.get_events():\n        # Generate unique sourceRef\n        sourceRef = \"SPK-\" + str(uuid.uuid4())[:6].upper()\n\n        # If a group_by field is provided, used it,\n        # otherwise default to sourceRef\n        group_by = str(event.get(helper.get_param(\"alert_group_by\"), None))\n        group_by = group_by or sourceRef\n\n        # Create new Alert, if needed\n        # Otherwise update existing one\n        if not alerts.get(group_by, False):\n            helper.log_info(\"Building new alert '{}' ...\".format(sourceRef))\n            alerts[group_by] = {\n                \"sourceRef\": sourceRef,\n                \"date\": int(time.time() * 1000),\n                \"type\": helper.get_param(\"alert_type\"),\n                \"source\": helper.get_param(\"alert_source\"),\n                \"title\": helper.get_param(\"alert_title\"),\n                \"description\": helper.get_param(\"alert_description\") or \"_No description provided._\",\n                \"tags\": helper.get_param(\"alert_tags\").split(\",\") or [],\n                \"caseTemplate\": helper.get_param(\"alert_case_template\") or None,\n                \"severity\": int(helper.get_param(\"alert_severity\")),\n                \"tlp\": int(helper.get_param(\"alert_tlp\")),\n                # \"pap\": int(helper.get_param(\"alert_pap\")), # Not supported in Alerts yet\n                \"artifacts\": [],\n                \"customFields\": {}\n            }\n\n            # Clear old artifacts list for this group\n            artifacts = []\n\n            # Set description to value of field\n            desc_id = alerts[group_by][\"description\"]\n            if desc_id in event:\n                if event[desc_id]:\n                    # Automatically fixes newline characters\n                    alerts[group_by][\"description\"] = event[desc_id].replace(\"\\\\n\", \"\\n\")\n                else:\n                    # Don't allow empty descriptions\n                    alerts[group_by][\"description\"] = \"_No description provided._\"\n        else:\n            # Add to the existing alert\n            helper.log_info(\"Adding artifacts to existing alert '{}' ...\".format(alerts[group_by][\"sourceRef\"]))\n\n        # Loop through each field,value pair in the row,skipping those pesky __mv_ fields\n        # and any fields that have empty values\n        for field, value in {k: v for k, v in event.items() if v and not k.startswith(\"__mv_\") and \":\" in k}.items():\n            # Parse Type and Message from field\n            # and make sure Type is valid and softfail to \"other\"\n            aType, aMsg = field.split(\":\", 1)\n            if aType not in DATA_TYPES:\n                aType = \"other\"\n\n            # Parse multivalue fields, if they exist\n            values = [value]\n            mv_field = \"__mv_\" + field\n            if event.get(mv_field, False):\n                values = [v for v in event[mv_field].split(\"$\") if v and v != \";\"]\n\n            # Handle multiple values\n            for v in values:\n                if aType == \"field\":\n                    # Parse customField Type and Name, defaulting to string type\n                    if \":\" in aMsg:\n                        fType, fName = aMsg.split(\":\", 1)\n                    else:\n                        fType = \"string\"\n                        fName = aMsg\n\n                    # Add customField to Alert if it does not exist\n                    if fName not in alerts[group_by][\"customFields\"]:\n                        alerts[group_by][\"customFields\"][fName] = {\n                            \"order\": len(alerts[group_by][\"customFields\"]),\n                            fType: v\n                        }\n                elif aType == \"tag\":\n                    # Add dynamic tags if it wasn't added already\n                    if v not in alerts[group_by][\"tags\"]:\n                        alerts[group_by][\"tags\"].append(v)\n                else:\n                    # Add new Artifact if it wasn't added already\n                    if v not in artifacts:\n                        artifacts.append(v)\n                        alerts[group_by][\"artifacts\"].append({\n                            \"message\": aMsg,\n                            \"dataType\": aType,\n                            \"data\": v\n                        })\n\n    # Send each alert to TheHive\n    thehive_url = helper.get_global_setting(\"thehive_url\")\n    thehive_key = helper.get_global_setting(\"thehive_key\")\n    for alert in alerts.values():\n        helper.log_info(\"Sending alert '{}' to TheHive...\".format(alert[\"sourceRef\"]))\n\n        # Build payload and headers\n        payload = {k: v for k, v in alert.items() if v is not None}\n        headers = {\n            \"Content-type\": \"application/json\",\n            \"Accept\": \"application/json\",\n            \"Authorization\": \"Bearer \" + thehive_key\n        }\n\n        # Send alert to TheHive\n        response = helper.send_http_request(thehive_url + \"/api/alert\", \"POST\",\n            payload=payload,\n            headers=headers,\n            verify=True,\n            use_proxy=True)\n\n        # Validate response from TheHive\n        # 200 = Created, 201 = Updated\n        if response.status_code in [200, 201]:\n            r_json = response.json()\n            helper.log_info(\"Successfully created/updated alert: {}\".format(r_json[\"id\"]))\n        else: # Soft-fail\n            helper.log_error(\"TheHive returned the following error: {}\".format(response.text))\n\n    return 0\n", "largeIcon": "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", "label": "Create Alert in TheHive", "description": "Creates a new Alert entry in TheHive with fields attached as Artifacts.", "parameters": [{"name": "alert_source", "help_string": "Source of the new alert entry. Default = \"splunk\"", "format_type": "text", "default_value": "splunk", "label": "Source", "type": "", "required": true, "value": "splunk"}, {"name": "alert_type", "help_string": "Type for the new alert entry. Default = \"alert\"", "format_type": "text", "default_value": "alert", "label": "Type", "type": "", "required": true, "value": "alert"}, {"name": "alert_title", "help_string": "Title of the new alert entry. Default = \"$name$\"", "format_type": "text", "default_value": "$name$", "label": "Title", "type": "", "required": true, "value": "$name$"}, {"name": "alert_description", "help_string": "Description of the new alert entry - Can be set to a field. eg: \"alert_desc\"", "format_type": "text", "default_value": "", "label": "Description", "type": "", "required": false, "value": ""}, {"name": "alert_tags", "help_string": "Comma-separated list of tags for the new alert entry. eg: \"malware,c2\"", "format_type": "text", "default_value": "", "label": "Tags", "type": "", "required": false, "value": ""}, {"name": "alert_case_template", "help_string": "Case Template to use for the new alert entry. eg: \"Malware Investigation\"", "format_type": "text", "default_value": "", "label": "Case Template", "type": "", "required": false, "value": ""}, {"name": "alert_severity", "help_string": "Severity of the new alert entry. Default = \"AMBER\"", "possible_values": {"MEDIUM": "2", "HIGH": "3", "LOW": "1"}, "format_type": "dropdownlist", "default_value": "2", "label": "Severity", "type": "", "required": true, "value": "2"}, {"name": "alert_tlp", "help_string": "TLP of the new alert entry. Default = \"AMBER\"", "possible_values": {"WHITE": "0", "AMBER": "2", "RED": "3", "GREEN": "1"}, "format_type": "dropdownlist", "default_value": "2", "label": "TLP", "type": "", "required": true, "value": "2"}, {"name": "alert_pap", "help_string": "PAP of the new alert entry. Default = \"AMBER\"", "possible_values": {"WHITE": "0", "AMBER": "2", "RED": "3", "GREEN": "1"}, "format_type": "dropdownlist", "default_value": "2", "label": "PAP", "type": "", "required": true, "value": "2"}, {"name": "alert_group_by", "help_string": "Field to use when grouping similar events together into one alert entry. eg: \"email_from\"", "format_type": "text", "default_value": "", "label": "Group by", "type": "", "required": false, "value": ""}]}]}, "validation": {"progress": 1.0, "validation_id": "v_1586461403_12", "validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_finished"}, "global_settings_builder": {"global_settings": {"customized_settings": [{"name": "thehive_url", "internal_name": "", "help_string": "Base URL for your instance of TheHive. eg: \"https://thehive.example.com\"", "format_type": "text", "default_value": "", "label": "TheHive URL", "type": "text", "required": true, "value": ""}, {"name": "thehive_key", "internal_name": "", "help_string": "API key for the user account that will be creating alerts in TheHive.", "format_type": "password", "default_value": "", "label": "API Key", "type": "password", "required": true, "value": ""}], "proxy_settings": {"proxy_type": "http"}, "log_settings": {}}}}